#!/usr/bin/env python


import rr1716
import argparse
import logging
from rr1716 import Cameras
from rr1716 import DEATHSTARE
import time
import sys
import os
import glob
import json

def main():
    parser = argparse.ArgumentParser()
    
    parser.add_argument('--check', '-c', action="store_true", dest="check", help="Check the commits for correctness")
    parser.add_argument('--logfile', '-f', action="store", dest="logfile", default="logging.log", help="Check the file for correctness")
    parser.add_argument('--loglevel', '-l', action="store", dest="loglevel", choices=['DEBUG','INFO','WARNING','ERROR','CRITICAL'], default="CRITICAL", help="Check the commits for correctness")
    parser.add_argument('--make_config', action='store_true', help="Create a config file")
    parser.add_argument('--config', action="store", dest="config_file", help='the config file to use')

    args = parser.parse_args()
    if args.make_config:
        print('Making config file')
        print('Warning: cameras must all have zero pitch and roll relative to the apriltags')
        config = {}
        for i in range(int(input('Number of cameras:'))):
            while True:
                camera_port = input(f'camera {i + 1} numbers:')
                if not os.path.exists(f'/dev/v4l/by-path/pci-0000:00:14.0-usb-{camera_port}-video-index0'):
                    print('Camera not plugged in')
                    continue
                break
            config[camera_port]={}

            while True:
                calibration_fname = input('camera calibration file(glob patterns allowed):')
                if len(glob.glob(calibration_fname)) != 1:
                    print(f'{calibration_fname} does not exit, or glob pattern is not specific enough. ')
                    continue
                break
            with open(glob.glob(calibration_fname)[0], 'r') as calibration_file:
                calibration = json.loads(calibration_file.read())
                config[camera_port]['calibration'] = calibration
            while True:
                pos = input(f'Position of camera {i + 1}(x,y,z,yaw):')
                if pos == '':
                    pos = '[0,0,0,0]'
                pos = json.loads(pos)
                if len(pos) != 4:
                    print('Length=4')
                    continue
                break
            config[camera_port]['pos'] = pos
        config_fname = input('Name of config file:')
        assert input(
            f'This will create a file called "configs/{config_fname}.json", are you sure(y/n):') == 'y', 'Operation canceled'
        with open(f'configs/{config_fname}.json', 'w') as config_file:
            config_file.write(json.dumps(config))
        print('Config file made')
        sys.exit()
    # use getattr to turn loglevel into integer
    logging.basicConfig(filename=args.logfile, filemode='w')
    logging.basicConfig(level=getattr(logging, args.loglevel))


    with open(parser.config_file, 'r') as f:
        config=json.loads(f.read())

    for i in config:
        if not os.path.exists(f'dev/v4l/by-path/pci-0000:00:14.0-usb-{i}-video-index0'):
            logging.error("camera not connected")
    
    
    
    
#    logging.debug("Debug test")
#    logging.info("Tnfo test")
#    logging.error("Error test")
#    logging.warning("warning test")
#    logging.critical("critical test")

    DEATHSTARE.start(Cameras)

    while True:
        for i in Cameras:
            i.update()
        time.sleep(0.01)


if __name__ == "__main__":
    main()
