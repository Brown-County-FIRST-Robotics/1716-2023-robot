#!/usr/bin/env python

import rr1716
import argparse
import logging
from rr1716 import Camera
from rr1716 import DEATHSTARE
from rr1716 import AprilTags
from rr1716 import Decision
from rr1716 import NetworkTables1716
from rr1716 import StateEstimator
import configs
from rr1716 import Positions
from concurrent.futures import ThreadPoolExecutor
import time
import sys
import os
import glob
import json
import signal
from concurrent.futures import ThreadPoolExecutor


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('--check', '-c', action="store_true", dest="check", help="Check the commits for correctness")
    parser.add_argument('--logfile', '-f', action="store", dest="logfile", default="logging.log", help="Check the file for correctness")
    parser.add_argument('--loglevel', '-l', action="store", dest="loglevel", choices=['DEBUG','INFO','WARNING','ERROR','CRITICAL'], default="WARNING", help="Check the commits for correctness")
    parser.add_argument('--config', '-k', action="store", dest="config_file", default="configs/webcam.json", help='the config file to use')
    parser.add_argument('--auto', '-a', action="store", dest="auto_mode", choices=['PLACEANDBALANCE', 'DEATHSTAREDEMO', 'DRIVETOAPRILTAG', 'DRIVETOGAMEPIECE', 'AUTO'], default="AUTO", help="The Action to start")
    parser.add_argument('--prod', action="store_true", dest="prod", help="If the robot should shut itself down")


    args = parser.parse_args()

    file_handler = logging.FileHandler(filename=args.logfile)
    stderr_handler = logging.StreamHandler(stream=sys.stderr)
    handlers = [file_handler, stderr_handler]
    logging.basicConfig(level=getattr(logging, args.loglevel), handlers=handlers)

    # use getattr to turn loglevel into integer

    config=configs.loadConfig(args.config_file)

    cameras = []

    for i in config:
        if not os.path.exists(i['port']):
            logging.error("camera not connected %s", i['port'])
            sys.exit()
        logging.info('opening camera %s', i['port'])
        cameras.append(Camera(i['port'],i['calibration'],i['pos'], i['role']))

# Keep these here as examples for logging
#    logging.debug("Debug test")
#    logging.info("Tnfo test")
#    logging.error("Error test")
#    logging.warning("warning test")
#    logging.critical("critical test")



    stopping = False
    originalhandler = signal.getsignal(signal.SIGINT)
    def handler(signum, frame):
        nonlocal stopping
        print('Signal handler called with signal', signum)
        print('stopping loop')
        stopping = True
        signal.signal(signal.SIGINT, originalhandler)
    signal.signal(signal.SIGINT, handler)

    nt_table = NetworkTables1716.NetworkTablesWrapper()
    filter=StateEstimator.StateEstimator()
    april_executor = ThreadPoolExecutor(max_workers=len(cameras))
 
    
    
    if args.auto_mode == 'PLACEANDBALANCE':
        current_action = Decision.StartFilter(filter, cameras, nt_table, april_executor, 'auto')
    elif args.auto_mode == 'DEATHSTAREDEMO':
        current_action = Decision.AddScreenVals(filter, cameras, nt_table, april_executor, 'auto')
    elif args.auto_mode == 'DRIVETOAPRILTAG':
        current_action = Decision.DriveDumb(filter, cameras, nt_table, april_executor,0, 'DRIVETOAPRILTAG')
    elif args.auto_mode == 'DRIVETOGAMEPIECE':        
        current_action = Decision.DriveToGamepeice(filter, cameras, nt_table, april_executor, 'drivetocube', 5, 100, 100, 300, 200, "cube_picked_color")
    elif args.auto_mode == 'AUTO':
        current_action = Decision.AwaitAutoStart(filter, cameras, nt_table, april_executor, 'auto')
    else:
        for camera in cameras:
            camera.shutdown()
        assert False, f'"{args.auto_mode}" does not have a matching `elif` block'
    

    DEATHSTARE.start(cameras, filter)

    lastframetime = 0
    try:
        while not stopping:
            
            if nt_table.IsTeleop():
                print("SHUTTING DOWN")
                if not args.prod:
                    sys.exit(0)
                else:
                    os.system('poweroff')

            #cap at 10 FPS in case this loop isn't the only thing on the pi and we want to not constantly nail the cpu
            newtime = time.time()
            towait = .1-(newtime - lastframetime)
            if towait > 0:
              time.sleep(towait)
            lastframetime = newtime
            for cam in cameras:
                cam.startupdate()
            for cam in cameras:
                cam.wait()
            if args.config_file[:9]!='CALIBRATE':
                res = Decision.doCurrentAction(current_action)
                if res is not None:
                    current_action = res


    finally:
        for camera in cameras:
            camera.shutdown()

if __name__ == "__main__":
    main()
